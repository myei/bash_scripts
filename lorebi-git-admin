#!/bin/bash
##############################################################
#
# 					Creado por: Manuel Gil
#
# Este script permite:
#
# - Autenticar el cliente con el servidor
#
# - Crear repositorio Git (si no existe) en el servidor 
# 	permitiendo el uso compartido
#
# - Enlazar el proyecto con el repositorio y sincronizar 
# 	el estado del proyecto automáticamente al servidor
#
# - Clonar un proyecto existente desde servidor de Git
#
# - Eliminar un repositorio remoto
#
##############################################################

##############################################################
#					G L O B A L E S
##############################################################

# C O L O R S
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\e[95m'
WHITE='\e[97m'
YELLOW='\e[93m'
NC='\033[0m'

# F O N T S
BOLD='\e[1m'
NF='\e[0m'
BLINK='\e[5m'
S='\e[4m'

# S Í M B O L O S
GOOD='\u2714'
BAD='\u2718'
ARROW='\u27a1'
HAND="\u261b"

# V A R
isNumber="^-?[0-9]+([.][0-9]+)?$"
repoSelected=""

# C O N F I G U R A C I Ó N
SERVER_NAME="Ranchito's Server"
SERVER='pmo@git.lorebi.com'
PORT='2000'
REPOS_PATH='/home/pmo/git/'
REMOTE_NAME='ranchito'
USERIP=$(hostname --ip-address)
USER=$(whoami)
USERHOME=$(ls -m /home)
SCRIPT_NAME='lorebiGitAdmin'
CREDENCIAL='LB-GIT.pem'

clearForReal() { printf "\ec"; }

##############################################################
#						M E N Ú
##############################################################
clearForReal
printf "\n 	  :: Bienvenido al ${BOLD}${PURPLE}${SCRIPT_NAME}${NF} ::\n\n"
printf " ${CYAN}${BOLD}Que acción desea realizar?${NF} \n\n${NC}"
printf "  [${CYAN}${BOLD}1${NC}] Autenticarme con el Servidor [${RED}${BOLD}root${NC}] (${BLUE}${BOLD}Sólo la primera vez${NC})\n"
printf "  [${CYAN}${BOLD}2${NC}] Crear repositorio y enlazar \n"
printf "  [${CYAN}${BOLD}3${NC}] Clonar repositorio \n"
printf "  [${CYAN}${BOLD}4${NC}] Eliminar repositorio \n"
printf "  [${CYAN}${BOLD}5${NC}] Histórico \n"
printf "  [${CYAN}${BOLD}6${NC}] Log \n"

if [[ $(echo $(readlink -f $0) | grep '/usr/bin/') = '' ]]; then
	printf "  [${CYAN}${BOLD}7${NC}] Registrar script (${BLUE}${BOLD}Sólo la primera vez${NC})\n"
fi

printf "  [${CYAN}${BOLD}x${NC}] Salir \n"

printf "\n${CYAN}${BOLD} Opción: ${NC}${BOLD}"
read -n 1 option
# clearForReal

validateCertificate() {
	printf "\n\n${CYAN} ${BOLD}Validando certificados...${NC}"
	if [[ $(grep -lir $CREDENCIAL /etc/ssh/ssh_config) = "" ]]; then
		printf "${RED}${BOLD} ${BAD}\n\n No estas autenticado con el servidor, debes ejecutar la primera opción y autenticarte correctamente${NC}\n\n"
		exit 1
	fi
	printf "${GREEN}${BOLD} ${GOOD}${NC}\n"

	# printf "\n\n${CYAN} ${BOLD}Validando credenciales...${NC}"
	# if [ ! -f ~/.ssh/id_rsa ]; then
	# 	printf "\n\n${CYAN}${BOLD} Autenticando con el $SERVER_NAME... ${NC}"
	#     printf "\n\n${CYAN}${BOLD} Generando clave... ${NC}\n\n"
	# 	ssh-keygen -b 4096 -t rsa -f ~/.ssh/id_rsa -q -N "" &>/dev/null
	# 	$(ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "$(declare -f); logger AUTHENTICATE ${repository} $USERIP $USER $USERHOME");
	# fi

	# validateCommand sshpass
	# sshpass -p "R0j0Put4." ssh-copy-id -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT &>/dev/null
	# validateConnection $?
	# printf "${GREEN}${BOLD} ${GOOD}${NC}\n"
}

validateConnection() {
	if [[ $1 != 0 ]]; then
		printf "\n${RED}${BOLD} No se pudo conectar con el servidor $SERVER_NAME,
	verifique su conexión a internet...${NC}\n\n"
		exit 1
	fi
}

saveScript() {
	if [[ $(echo $(readlink -f $0) | grep '/usr/bin/') = '' ]]; then
		if [[ -f /usr/bin/$SCRIPT_NAME || -L /usr/bin/$SCRIPT_NAME ]]; then
			sudo rm /usr/bin/$SCRIPT_NAME
		fi
		
		sudo cp $(readlink -f $0) /usr/bin/$SCRIPT_NAME
	fi
}

confirm() {
	printf " $1${BOLD}$2$1${BOLD}? [Y/n]: ${WHITE}"
	read -n 1 confirm
	printf "${NC}\n"

	if [[ $confirm != "Y" && $confirm != "y" && $confirm != "" ]]; then
		printf "\n\n${GREEN} ${BOLD}Operación abortada... ${NC}\n\n"
		exit 1
	fi
}

whereDoICLone() {
	printf "\n ${CYAN}${BOLD}Dime donde lo clono? [$(pwd)"/"${repository:0:-4}]: ${WHITE}"
	read -p "" -e choice
	printf "${NC}\n"

	if [[ $choice = "" ]]; then
		direc=$(pwd)"/"${repository:0:-4}
	else
		direc=$choice
	fi
}

pressEnter() {
	printf "\n${CYAN}${BOLD} Presiona Enter para $1...${NC}"
	read -p ""
}

validateCommand() {
	if [[ $(ls /usr/bin/$1 | grep $1) = '' ]]; then
		printf "\n\n${CYAN}${BOLD} Instalando paquete necesario..${NC}\n\n"

		if [[ -f /usr/bin/dpkg ]]; then
			sudo apt-get install $1 -y
		elif [[ -f /usr/bin/pacman ]]; then
			sudo pacman -S $1 --noconfirm
		elif [[ -f /usr/bin/yum ]]; then
			sudo yum -y install $1
		else
			printf "\n\n${YELLOW}${BOLD} Disculpa, no conozco tu manejador de paquetes, por favor ingresa el equivalente al siguiente comando en tu sistema: '${CYAN}${BOLD}apt-get install $1${YELLOW}${BOLD}' ${NC}${BOLD}\n\n"
			read -p " " comando
			sudo $comando
		fi
	fi

	if [[ $(ls /usr/bin/$1 | grep $1) = '' ]]; then
		printf "\n${RED}${BOLD} El paquete ${WHITE}${BOLD}$1${RED}${BOLD} no se ha instalado y es ${WHITE}${BOLD}necesario${RED}${BOLD} para poder continuar... ${NC}"
		exit
		# validateCommand $1
	fi
}

logger() {
	logPath='/home/pmo/git/.log'

	if [[ ! -f $logPath ]]; then
		touch $logPath
	fi
	
	echo -e "\n -- $1 $2 $(date)" >> $logPath
	echo "    " $3 >> $logPath
	echo "    " $4 $5 >> $logPath
	echo " --" >> $logPath
}

if [[ ($(echo $(readlink -f $0) | grep '/usr/bin/') != '' && $option = "7")]]; then
	printf "\n${YELLOW}${BOLD} Ha salido del programa...${NC}\n\n"
	exit
elif [[ $option != "1" && $option != "2" && $option != "3" && $option != "4" && $option != "5" && $option != "6" && $option != "7" ]]; then
	printf "\n${YELLOW}${BOLD} Ha salido del programa...${NC}\n\n"
	exit 1
elif [[ $option = "1" ]]; then

	##############################################################
	#		V A L I D A C I O N E S   G E N E R A L E S
	##############################################################

	printf "\n\n"
	if [ $EUID -ne 0 ]; then
		printf "${RED}${BOLD} Para acceder a esta opción debes ejecutar el script como root${NC}\n\n"
		exit 1
	fi

	if [[ $(grep -lir $CREDENCIAL /etc/ssh/ssh_config) != "" ]]; then
		confirm "${YELLOW}" "Parece que ya te autenticaste... Quieres volver a hacerlo para solucionar algún problema"
		printf "\n"
	fi

	foundIt=false
	while [[ $foundIt = false ]]; do
		if [[ ! -f $certPath$CREDENCIAL ]]; then
			printf "${YELLOW}${BOLD} No encontré el certificado $CREDENCIAL, dime donde está?: ${NC}"
			read -p "" -e certPath
			certPath=$certPath"/"
			printf "\n"
		else
			foundIt=true
		fi
	done

	printf "${CYAN}${BOLD} Ingrese su usuario de linux:${NC} "
	read -p "" user
	if [[ ! -d /home/$user || $user = "" ]]; then
		printf "\n${RED}${BOLD} Ese no es tu usuario, por favor ingresa el correcto${NC}\n\n"
		exit 1
	fi
	
	saveScript

	printf "\n${CYAN}${BOLD} Autenticando...${NC}\n"

	if [ ! -d /home/$user/.certs ]; then
		mkdir /home/$user/.certs
	fi

	if [ ! -f /etc/ssh/ssh_config ]; then
		touch /etc/ssh/ssh_config
	fi

	cp $certPath$CREDENCIAL /home/$user/.certs/
	chmod 600 /home/$user/.certs/$CREDENCIAL

	if [[ -f /usr/bin/dpkg ]]; then
		chown -R $user:$user /home/$user/.certs
	elif [[ -f /usr/bin/pacman ]]; then
		chown -R $user:users /home/$user/.certs
	fi


	echo -e "\n IdentityFile /home/$user/.certs/$CREDENCIAL" >> /etc/ssh/ssh_config

	$(ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "$(declare -f); logger AUTHENTICATE ${repository} $USERIP $USER $USERHOME");
	printf "\n${GREEN}${BOLD} Autenticación exitosa, ahora puedes ejecutarme donde quieras como: '$SCRIPT_NAME'...${NC}\n"

	pressEnter "salir"
	# exec $(readlink -f "$0")
	clearForReal
	exit

elif [[ $option = "3" || $option = "4" ]]; then

	##############################################################
	#	  L I S T A D O   D E   R E P O S I T O R I O S
	##############################################################

	printf "${CYAN}\n ${BOLD}Buscando repositorios...${NF}\n\n${NC}"

	array=($(ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT ls $REPOS_PATH))

	validateConnection $?

	cont=0
	for item in ${array[*]}
	do
		printf "     [${CYAN}${BOLD}$cont${NC}] %s\n" $item
		let cont+=1
	done

	printf "\n ${CYAN}${BOLD}Seleccione un repositorio:${WHITE} "
	read -p "" repoSelec
	printf "\n"

    if [[ $repoSelec -ge ${#array[*]} || $repoSelec < 0 || !($repoSelec =~ $isNumber) || $repoSelec = "" ]]; then
		printf "\n${RED}${BOLD} Debe seleccionar un repositorio...${NC}\n\n"
		exit 1
	fi

   	repository=${array[$repoSelec]}
fi

##############################################################
#		N O M B R E   D E L   R E P O S I T O R I O
##############################################################

if [[ $repository = "" && $option = "2" ]]; then
	printf "\n${CYAN}${BOLD} Nombre del respositorio a crear (${RED}${BOLD}sin .git${CYAN}${BOLD}) [$(basename $(pwd))]:${NC} "
	read -p "" newRepo
	printf "\n"
	if [[ $newRepo = "" ]]; then
	    newRepo=$(basename $(pwd))
	fi
	repository=$newRepo".git"
fi 

if [[ $option = "2" ]]; then

	##############################################################
	#		C O N F I G U R A C I Ó N   D E L   S E R V I D O R
	##############################################################

	confirm "${YELLOW}" "Está seguro de crear el repositorio ${I}'$repository'${NF}"

	printf "\n${CYAN} ${BOLD}Creando repositorio remoto...${NC}\n\n"

	creatingRepo=$(ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "
										if [ ! -d $REPOS_PATH$repository ]; then
											cd $REPOS_PATH
											mkdir '$repository'

											cd '$repository'
											git --bare init
											git config core.sharedRepository true
											
											$(declare -f); logger ADD ${repository} $USERIP $USER $USERHOME
											echo 1
										else
											echo 0
										fi	
									")

	##############################################################
	#		C O N F I G U R A C I Ó N   D E L   C L I E N T E
	##############################################################

	if [[ $(grep "0" <<< $creatingRepo) ]]; then
		printf "\n${RED}${BOLD} Ese nombre de repositorio ya esta utilizado...${NC}\n\n"
		exit 1
	elif [[ $(grep "0" <<< $creatingRepo) = "" && $(grep "1" <<< $creatingRepo) = "" ]]; then
		printf "\n${RED}${BOLD} No se pudo conectar con el servidor $SERVER_NAME, verifique su conexión a internet...${NC}\n\n"
		exit 1
	fi

	notify-send $SCRIPT_NAME "$repository creeado exitosamente"
	printf "\n${GREEN}${BOLD} Repositorio creado...${NC}\n\n"
	printf "\n${CYAN}${BOLD} Creando repositorio local si no estaba creado...${NC}\n\n"
	git init
	printf "\n${CYAN}${BOLD} Agregando archivos...${NC}\n"
	git add --all
	printf "\n${CYAN}${BOLD} Creando el commit...${NC}\n\n"
	git commit -m "INITIAL COMMIT TO $SERVER_NAME "
	git remote remove $REMOTE_NAME
	git remote add $REMOTE_NAME "git+ssh://$SERVER:$PORT$REPOS_PATH$repository"
	printf "\n${CYAN}${BOLD} Cargando el estado del proyecto al: $SERVER_NAME ${NC}\n\n"
	git push $REMOTE_NAME master

elif [[ $option = "3" ]]; then

	direc=$(pwd)"/"${repository:0:-4}
	printf " $1${BOLD}${YELLOW}Está seguro de clonar ${I}'${array[$repoSelec]}' ${NF}${YELLOW}${BOLD}en ${I}'$direc'${BOLD}? [Y/n/o]: ${WHITE}"
	read -n 1 choice
	printf "${NC}\n"

	if [[ $choice = "o" || $choice = "O" ]]; then
		whereDoICLone
	elif [[ $choice != "Y" && $choice != "y" && $choice != "" ]]; then
		printf "\n\n${GREEN} ${BOLD}Operación abortada... ${NC}\n\n"
		exit 1
	else 
		choice=""
	fi

	allClear=false
	while [[ $allClear = false ]]; do
		if [[ -d $direc ]]; then
			confirm "${YELLOW}" "Ya existe el directorio ${I}'$direc'... Clonar en uno distinto"
			whereDoICLone
		else
			allClear=true
		fi
	done

	printf "\n${CYAN}${BOLD} Clonando repositorio...${NC}\n\n"

	git clone git+ssh://$SERVER:$PORT$REPOS_PATH$repository $choice
	$(ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "$(declare -f); logger CLONE ${repository} $USERIP $USER $USERHOME");
	cd $direc
	git remote rename origin $REMOTE_NAME

	# C R E A N D O   Y   A C T U A L I Z A N D O   
	# T O D A S   L A S   R A M A S   R E M O T A S
	branches=$(git branch -a | grep remotes/$REMOTE_NAME | grep -v HEAD | grep -v master)

	cont=0
	for remote in ${branches[*]}
	do
		IFS='/' read -r -a branch <<< "$remote"
		printf "\n${CYAN}${BOLD} Creando y actualizando rama remota: ${YELLOW}${branch[2]} ${NC}\n\n"
		git branch ${branch[2]} $remote

		let cont+=1
	done

elif [[ $option = "4" ]]; then

	confirm "${RED}" "Está seguro de eliminar ${I}'${array[$repoSelec]}'${NF}"

	ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "
		if [ -d $REPOS_PATH${array[$repoSelec]} ]; then
			sudo rm -r $REPOS_PATH${array[$repoSelec]}

			$(declare -f); logger DELETE ${array[$repoSelec]} $userip  $user $userHome
		fi	
	"
	clearForReal
	notify-send $SCRIPT_NAME "${array[$repoSelec]} eliminado"
	printf "\n${GREEN} ${BOLD}${array[$repoSelec]} eliminado... ${NC}\n\n"	
	exit

elif [[ $option = "5" ]]; then
	printf "\n\n${CYAN}${BOLD} Cargando log... ${NC}\n\n"
	ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "cat $REPOS_PATH.log"
	exit
elif [[ $option = "6" ]]; then
	printf "\n\n${CYAN}${BOLD} Cargando log... ${NC}\n"
	notify-send $SCRIPT_NAME "Presione Ctrl + c para salir..."
	printf "\n${YELLOW}${BOLD} Presione Ctrl + c para salir...${NC}\n\n"
	ssh -t -t -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SERVER -p $PORT "tail -f $REPOS_PATH.log"
	exit
elif [[ $option = "7" ]]; then
	saveScript

	if [[ $? != "0" ]]; then
		notify-send $SCRIPT_NAME "Debe autenticarse correctamente!"
		printf "\n${RED}${BOLD} Debe autenticarse correctamente...${NC}\n\n"
		exit
	else
		printf "\n\n${GREEN}${BOLD} Ahora puedes ejecutarme donde quieras como: '$SCRIPT_NAME'${NC}\n"
		pressEnter "volver al menú principal"
		exec $(readlink -f "$0")
	fi

fi

	printf "\n${GREEN}${BOLD} Listo, ahora puedes seguir trabajando en tu proyecto...${NC}\n\n"
	printf "\n${CYAN}${BOLD} NOTA: tus pushs deben estar dirigidos a '$REMOTE_NAME' (git push $REMOTE_NAME <branch>)...${NC}\n\n"

	pressEnter "salir"
	clearForReal
exit
