#!/bin/bash
##############################################################
#
# 					Creado por: Manuel Gil
#
# Este script permite:
#
# - Autenticar el cliente con el servidor
#
# - Crear repositorio Git (si no existe) en el servidor 
# 	permitiendo el uso compartido
#
# - Enlazar el proyecto con el repositorio y sincronizar 
# 	el estado del proyecto automáticamente al servidor
#
# - Clonar un proyecto existente desde servidor de Git
#
# - Eliminar un repositorio remoto
#
#	NOTA: Este script debe ser ejecutado desde la ruta del 
#		  proyecto que se quiere enlazar con el AWS, o desde
#		  donde se le quiere clonar
#
##############################################################

##############################################################
#					G L O B A L E S
##############################################################

# C O L O R S
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\e[95m'
WHITE='\e[97m'
YELLOW='\e[93m'
NC='\033[0m'

# F O N T S
BOLD='\e[1m'
NF='\e[0m'
BLINK='\e[5m'
S='\e[4m'

# S Í M B O L O S
GOOD='\u2714'
BAD='\u2718'
ARROW='\u27a1'
HAND="\u261b"

AMAZON='ubuntu@54.204.107.45'
isNumber="^-?[0-9]+([.][0-9]+)?$"
repoSelected=""
clearForReal() { printf "\ec"; }

##############################################################
#						M E N Ú
##############################################################
clearForReal
printf "\n 	  :: Bienvenido al ${BOLD}${PURPLE}LorebiGit${NF} ::\n\n"
printf " ${CYAN}${BOLD}Que acción desea realizar?${NF} \n\n${NC}"
printf "  [${CYAN}${BOLD}1${NC}] Autenticarme con el Servidor [${RED}${BOLD}root${NC}] (${BLUE}${BOLD}Sólo la primera vez${NC})\n"
printf "  [${CYAN}${BOLD}2${NC}] Crear repositorio y enlazar \n"
printf "  [${CYAN}${BOLD}3${NC}] Clonar repositorio \n"
printf "  [${CYAN}${BOLD}4${NC}] Eliminar repositorio \n"
printf "  [${CYAN}${BOLD}x${NC}] Salir \n"

printf "\n${CYAN}${BOLD} Opción: ${NC}${BOLD}"
read -n 1 option
# clearForReal

##############################################################
#				A U T E N T I C A C I Ó N
##############################################################

validateCertificate() {
	printf "\n\n${CYAN} ${BOLD}Validando certificados...${NC}"
	if [[ $(grep -lir "LB-PMO.pem" /etc/ssh/ssh_config) = "" ]]; then
		printf "${RED}${BOLD} ${BAD}\n\n No estas autenticado con el servidor, debes ejecutar la primera opción y autenticarte correctamente${NC}\n\n"
		exit 1
	fi
	printf "${GREEN}${BOLD} ${GOOD}${NC}\n"
}

validateConnection() {
	if [[ $(echo $?) != 0 ]]; then
		printf "\n${RED}${BOLD} No se pudo conectar con el servidor AWS,
	verifique su conexión a internet...${NC}\n\n"
		exit 1
	fi
}

confirm() {
	printf " $1${BOLD}$2$1${BOLD}? [Y/n]: ${WHITE}"
	read -n 1 confirm
	printf "${NC}\n"

	if [[ $confirm != "Y" && $confirm != "y" && $confirm != "" ]]; then
		printf "\n\n${GREEN} ${BOLD}Operación abortada... ${NC}\n\n"
		exit 1
	fi
}

whereDoICLone() {
	printf "\n ${CYAN}${BOLD}Dime donde lo clono? [$(pwd)"/"${repository:0:-4}]: ${WHITE}"
	read -p "" -e choice
	printf "${NC}\n"

	if [[ $choice = "" ]]; then
		direc=$(pwd)"/"${repository:0:-4}
	else
		direc=$choice
	fi
}

pressEnter() {
	printf "\n${CYAN}${BOLD} Presiona Enter para $1...${NC}"
	read -p ""
}

if [[ $option != "1" && $option != "2" && $option != "3" && $option != "4" ]]; then
	printf "\n${YELLOW}${BOLD} Ha salido del programa...${NC}\n\n"
	exit 1
elif [[ $option = "1" ]]; then

	##############################################################
	#		V A L I D A C I O N E S   G E N E R A L E S
	##############################################################

	printf "\n\n"
	if [ $EUID -ne 0 ]; then
		printf "${RED}${BOLD} Para acceder a esta opción debes ejecutar el script como root${NC}\n\n"
		exit 1
	fi

	if [[ $(grep -lir "LB-PMO.pem" /etc/ssh/ssh_config) != "" ]]; then
		confirm "${YELLOW}" "Parece que ya te autenticaste... Quieres volver a hacerlo para solucionar algún problema"
		printf "\n"
	fi

	foundIt=false
	while [[ $foundIt = false ]]; do
		if [[ ! -f $certPath"LB-PMO.pem" ]]; then
			printf "${YELLOW}${BOLD} No encontré el certificado LB-PMO.pem, dime donde está?: ${NC}"
			read -p "" -e certPath
			certPath=$certPath"/"
			printf "\n"
		else
			foundIt=true
		fi
	done

	printf "${CYAN}${BOLD} Ingrese su usuario de linux:${NC} "
	read -p "" user
	if [[ ! -d /home/$user || $user = "" ]]; then
		printf "\n${RED}${BOLD} Ese no es tu usuario, por favor ingresa el correcto${NC}\n\n"
		exit 1
	fi
	
	##############################################################
	#	  R E G I S T R A N D O   E L   C E R T I F I C A D O
	##############################################################

	if [ ! -f /home/$user/.lorebiGitAdmin ]; then
		rm /home/$user/.lorebiGitAdmin
	fi

	if [ -L /usr/bin/lorebiGitAdmin ]; then
		rm /usr/bin/lorebiGitAdmin
	fi

	cp $(readlink -f $0) /home/$user/.lorebiGitAdmin
	ln -s /home/$user/.lorebiGitAdmin /usr/bin/lorebiGitAdmin

	printf "\n${CYAN}${BOLD} Autenticando...${NC}\n"

	if [ ! -d /home/$user/.certs ]; then
		mkdir /home/$user/.certs
	fi

	if [ ! -f /etc/ssh/ssh_config ]; then
		touch /etc/ssh/ssh_config
	fi

	cp $certPath"LB-PMO.pem" /home/$user/.certs/
	chmod 600 /home/$user/.certs/LB-PMO.pem
	chown -R $user:$user /home/$user/.certs

	echo -e "\n IdentityFile /home/$user/.certs/LB-PMO.pem" >> /etc/ssh/ssh_config

	printf "\n${GREEN}${BOLD} Autenticación exitosa...${NC}\n"

	pressEnter "continuar"
	exec $(readlink -f "$0")

elif [[ $option = "3" || $option = "4" ]]; then
	validateCertificate

	##############################################################
	#	  L I S T A D O   D E   R E P O S I T O R I O S
	##############################################################

	printf "${CYAN}\n ${BOLD}Buscando repositorios...${NF}\n\n${NC}"

	array=($(ssh $AMAZON ls /home/ubuntu/git))

	validateConnection

	cont=0
	for item in ${array[*]}
	do
		printf "     [${CYAN}${BOLD}$cont${NC}] %s\n" $item
		let cont+=1
	done


	printf "\n ${CYAN}${BOLD}Seleccione un repositorio:${WHITE} "
	read -p "" repoSelec
	printf "\n"

    if [[ $repoSelec -ge ${#array[*]} || $repoSelec < 0 || !($repoSelec =~ $isNumber) || $repoSelec = "" ]]; then
		printf "\n${RED}${BOLD} Debe seleccionar un repositorio...${NC}\n\n"
		exit 1
	fi

   	repository=${array[$repoSelec]}
fi

##############################################################
#		N O M B R E   D E L   R E P O S I T O R I O
##############################################################

if [[ $repository = "" ]]; then
	validateCertificate
	printf "\n${CYAN}${BOLD} Nombre del respositorio a crear (${RED}${BOLD}sin .git${CYAN}${BOLD}) [$(basename $(pwd))]:${NC} "
	read -p "" newRepo
	printf "\n"
	if [[ $newRepo = "" ]]; then
	    newRepo=$(basename $(pwd))
	fi
	repository=$newRepo".git"
fi 

if [[ $option = "2" ]]; then

	##############################################################
	#		C O N F I G U R A C I Ó N   D E L   S E R V I D O R
	##############################################################

	confirm "${YELLOW}" "Está seguro de crear el repositorio ${I}'$repository'${NF}"

	printf "\n${CYAN} ${BOLD}Creando repositorio remoto...${NC}\n\n"

	creatingRepo=$(ssh -t -t $AMAZON "
										if [ ! -d /home/ubuntu/git/$repository ]; then
											cd /home/ubuntu/git
											mkdir '$repository'

											cd '$repository'
											git --bare init
											git config core.sharedRepository true

											echo -e '\n -- ADD ${repository}' >> /home/ubuntu/git/.log
											echo $(hostname --ip-address) >> /home/ubuntu/git/.log
											echo $(whoami) >> /home/ubuntu/git/.log
											echo ' --' >> /home/ubuntu/git/.log
										else
											echo 0
										fi	
									")
	validateConnection

	##############################################################
	#		C O N F I G U R A C I Ó N   D E L   C L I E N T E
	##############################################################

	if [[ $(grep "0" <<< $creatingRepo) ]]; then
		printf "\n${RED}${BOLD} Ese nombre de repositorio ya esta utilizado...${NC}\n\n"
		exit 1
	fi

	printf "\n${GREEN}${BOLD} EXITO: Repositorio creado!...${NC}\n\n"
	printf "\n${CYAN}${BOLD} Creando repositorio local si no estaba creado...${NC}\n\n"
	git init
	printf "\n${CYAN}${BOLD} Agregando archivos...${NC}\n"
	git add --all
	printf "\n${CYAN}${BOLD} Creando el commit...${NC}\n\n"
	git commit -m "INITIAL COMMIT TO AWS'S SERVER"
	git remote remove aws
	git remote add aws "git+ssh://$AMAZON/home/ubuntu/git/$repository"
	printf "\n${CYAN}${BOLD} Cargando el estado del proyecto al: AWS's Server${NC}\n\n"
	git push aws master

elif [[ $option = "3" ]]; then

	direc=$(pwd)"/"${repository:0:-4}
	printf " $1${BOLD}${YELLOW}Está seguro de clonar ${I}'${array[$repoSelec]}' ${NF}${YELLOW}${BOLD}en ${I}'$direc'${BOLD}? [Y/n/o]: ${WHITE}"
	read -n 1 choice
	printf "${NC}\n"

	if [[ $choice = "o" || $choice = "O" ]]; then
		whereDoICLone
	elif [[ $choice != "Y" && $choice != "y" && $choice != "" ]]; then
		printf "\n\n${GREEN} ${BOLD}Operación abortada... ${NC}\n\n"
		exit 1
	else 
		choice=""
	fi

	allClear=false
	while [[ $allClear = false ]]; do
		if [[ -d $direc ]]; then
			confirm "${YELLOW}" "Ya existe el directorio ${I}'$direc'... Clonar en uno distinto"
			whereDoICLone
		else
			allClear=true
		fi
	done

	printf "\n${CYAN}${BOLD} Clonando repositorio...${NC}\n\n"

	git clone git+ssh://$AMAZON/home/ubuntu/git/$repository $choice
	cd $direc
	git remote rename origin aws

elif [[ $option = "4" ]]; then

	confirm "${RED}" "Está seguro de eliminar ${I}'${array[$repoSelec]}'${NF}"

	ssh -t -t $AMAZON "
		if [ -d /home/ubuntu/git/${array[$repoSelec]} ]; then
			sudo rm -r /home/ubuntu/git/${array[$repoSelec]}

			if [ ! -f /home/ubuntu/git/.log ]; then
				touch /home/ubuntu/git/.log
			fi

			echo -e '\n -- DELETE ${array[$repoSelec]}' >> /home/ubuntu/git/.log
			echo $(hostname --ip-address) >> /home/ubuntu/git/.log
			echo $(whoami) >> /home/ubuntu/git/.log
			echo ' --' >> /home/ubuntu/git/.log
		fi	
	"
	clearForReal
	printf "\n${GREEN} ${BOLD}${array[$repoSelec]} eliminado... ${NC}\n\n"	
	exit
fi

	printf "\n${GREEN}${BOLD} Listo, ahora puedes seguir trabajando en tu proyecto...${NC}\n\n"
	printf "\n${CYAN}${BOLD} NOTA: tus pushs deben estar dirigidos a 'aws' (git push aws <branch>)...${NC}\n\n"

	pressEnter "salir"
	clearForReal
exit
